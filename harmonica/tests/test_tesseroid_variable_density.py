# Copyright (c) 2018 The Harmonica Developers.
# Distributed under the terms of the BSD 3-Clause License.
# SPDX-License-Identifier: BSD-3-Clause
#
# This code is part of the Fatiando a Terra project (https://www.fatiando.org)
#
"""
Test functions for variable density tesseroids
"""
import pytest
import numpy as np
import numpy.testing as npt
from boule import WGS84
from verde import grid_coordinates

from .utils import require_numba
from .test_tesseroid import ACCURACY_THRESHOLD
from ..constants import GRAVITATIONAL_CONST
from ..forward.tesseroid import tesseroid_gravity, _density_based_discretization


def shell_linear_density(radius, inner_radius, outer_radius, slope, constant_term):
    """
    Analytical solutions for gravitational fields generated by a spherical
    shell with linear density
    """
    constant = np.pi * GRAVITATIONAL_CONST * slope * (
        outer_radius ** 4 - inner_radius ** 4
    ) + 4 / 3.0 * np.pi * GRAVITATIONAL_CONST * constant_term * (
        outer_radius ** 3 - inner_radius ** 3
    )
    potential = constant / radius
    analytical = {
        "potential": potential,
        "g_z": 1e5 * (potential / radius),
    }
    return analytical


@require_numba
@pytest.mark.parametrize("field", ["potential", "g_z"])
@pytest.mark.parametrize("thickness", [100, 1e3, 10e3, 100e3])
def test_spherical_shell_linear_density(field, thickness):
    """
    Compare results with analytical solutions of spherical shell
    with linear density
    """
    # Define a regular grid of computation points
    coordinates = grid_coordinates(
        [0, 350, -90, 90], spacing=10, extra_coords=WGS84.mean_radius
    )
    # Set top boundary of spherical shell to mean Earth radius, and
    # choose its bottom boundary based on the thickness
    top = WGS84.mean_radius
    bottom = top - thickness
    # Define parameters for the linear density function
    density_bottom = 3300.0
    density_top = 2670.0
    slope = (density_top - density_bottom) / (top - bottom)
    constant_term = density_bottom - bottom * slope
    # Define a set of tesseroids that model the spherical shell
    shape = (12, 6)
    longitude = np.linspace(0, 360, shape[0] + 1)
    latitude = np.linspace(-90, 90, shape[1] + 1)
    west, east = longitude[:-1], longitude[1:]
    south, north = latitude[:-1], latitude[1:]
    tesseroids = [
        [w, e, s, n, bottom, top]
        for w, e in zip(west, east)
        for s, n in zip(south, north)
    ]
    # Compute analytical solution
    analytical = shell_linear_density(
        WGS84.mean_radius, bottom, top, slope, constant_term
    )
    npt.assert_allclose(
        analytical[field],
        tesseroid_gravity(
            coordinates,
            tesseroids,
            lambda radius: slope * radius + constant_term,
            field=field,
        ),
        rtol=ACCURACY_THRESHOLD,
    )


def test_no_discretization_linear_density():
    """
    Test if no density-based discretization is done in case of linear density
    """
    pass


def test_straight_line():
    """
    Check if the straight line function works as expected
    """
